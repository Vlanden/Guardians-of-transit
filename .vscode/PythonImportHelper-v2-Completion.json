[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "flask_login",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask_login",
        "description": "flask_login",
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "FileAllowed",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "FileAllowed",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "FileRequired",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "QuizForm",
        "importPath": "app.forms.quiz_forms",
        "description": "app.forms.quiz_forms",
        "isExtraImport": true,
        "detail": "app.forms.quiz_forms",
        "documentation": {}
    },
    {
        "label": "PreguntaForm",
        "importPath": "app.forms.quiz_forms",
        "description": "app.forms.quiz_forms",
        "isExtraImport": true,
        "detail": "app.forms.quiz_forms",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizPregunta",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Perfil",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizPregunta",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "intentos",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Perfil",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Perfil",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "intentos",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizPregunta",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_extra",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_sim",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizSimulacion",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "intentos",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_extra",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_sim",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Perfil",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizPregunta",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_valid_username",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_strong_password",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "send_reset_email",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DisconnectionError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "isExtraImport": true,
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "generate_csrf",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "validate_csrf",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DDL",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "new_password",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "UserController",
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "isExtraImport": true,
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "run",
        "description": "run",
        "isExtraImport": true,
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "flask_limiter",
        "description": "flask_limiter",
        "isExtraImport": true,
        "detail": "flask_limiter",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "flask_limiter.util",
        "description": "flask_limiter.util",
        "isExtraImport": true,
        "detail": "flask_limiter.util",
        "documentation": {}
    },
    {
        "label": "Talisman",
        "importPath": "flask_talisman",
        "description": "flask_talisman",
        "isExtraImport": true,
        "detail": "flask_talisman",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.auth.auth",
        "description": "app.auth.auth",
        "peekOfCode": "def login():\n    if request.method == 'POST':\n        # Aquí agregarás la lógica para la autenticación\n        username = request.form['username']\n        password = request.form['password']\n        user = User.query.filter_by(username=username).first()\n        if user and user.check_password(password):\n            login_user(user)\n            return redirect(url_for('index'))\n    return render_template('login.html')",
        "detail": "app.auth.auth",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.auth.auth",
        "description": "app.auth.auth",
        "peekOfCode": "def register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        new_user = User(username=username, password=password)\n        new_user.save()\n        return redirect(url_for('auth.login'))\n    return render_template('register.html')\n# Ruta de perfil de usuario\n@auth_blueprint.route('/profile')",
        "detail": "app.auth.auth",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "app.auth.auth",
        "description": "app.auth.auth",
        "peekOfCode": "def profile():\n    return render_template('profile.html')\n# Conexión a la base de datos (mover a un archivo aparte si es grande)\ndef get_db():\n    return sqlite3.connect('usuarios.db')\n# ... (incluye aquí todas las funciones auxiliares: hash_password, check_password, etc.)",
        "detail": "app.auth.auth",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.auth.auth",
        "description": "app.auth.auth",
        "peekOfCode": "def get_db():\n    return sqlite3.connect('usuarios.db')\n# ... (incluye aquí todas las funciones auxiliares: hash_password, check_password, etc.)",
        "detail": "app.auth.auth",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "app.auth.auth",
        "description": "app.auth.auth",
        "peekOfCode": "auth_bp = Blueprint('auth', __name__, template_folder='templates')\n# Ruta de inicio de sesión\n@auth_blueprint.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        # Aquí agregarás la lógica para la autenticación\n        username = request.form['username']\n        password = request.form['password']\n        user = User.query.filter_by(username=username).first()\n        if user and user.check_password(password):",
        "detail": "app.auth.auth",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "class Config:\n    SECRET_KEY = 'mi_clave_secreta'\n    SQLALCHEMY_DATABASE_URI = 'mysql://usuario:contraseña@localhost/guardianes_de_la_via'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "QuizForm",
        "kind": 6,
        "importPath": "app.controllers.admin.preguntas_controller",
        "description": "app.controllers.admin.preguntas_controller",
        "peekOfCode": "class QuizForm(FlaskForm):\n    titulo = StringField('Título', validators=[DataRequired()])\n    descripcion = TextAreaField('Descripción', validators=[DataRequired()])\n    imagen = FileField('Imagen del Quiz', validators=[\n        Optional(),\n        FileAllowed(['jpg', 'jpeg', 'png'], 'Solo imágenes JPG/PNG')\n    ])\nclass PreguntaForm(FlaskForm):\n    pregunta = StringField('Texto de la pregunta', validators=[DataRequired()])\n    opcion_correcta = StringField('Opción correcta', validators=[DataRequired()])",
        "detail": "app.controllers.admin.preguntas_controller",
        "documentation": {}
    },
    {
        "label": "PreguntaForm",
        "kind": 6,
        "importPath": "app.controllers.admin.preguntas_controller",
        "description": "app.controllers.admin.preguntas_controller",
        "peekOfCode": "class PreguntaForm(FlaskForm):\n    pregunta = StringField('Texto de la pregunta', validators=[DataRequired()])\n    opcion_correcta = StringField('Opción correcta', validators=[DataRequired()])\n    opcion2 = StringField('Opción 2', validators=[DataRequired()])\n    opcion3 = StringField('Opción 3', validators=[Optional()])\n    opcion4 = StringField('Opción 4', validators=[Optional()])\n    explicacion = TextAreaField('Explicación', validators=[Optional()])\n    orden = IntegerField('Orden de la pregunta', validators=[DataRequired()])",
        "detail": "app.controllers.admin.preguntas_controller",
        "documentation": {}
    },
    {
        "label": "listar_quizzes",
        "kind": 2,
        "importPath": "app.controllers.admin.quiz_controller",
        "description": "app.controllers.admin.quiz_controller",
        "peekOfCode": "def listar_quizzes():\n    quizzes = juegos_quiz.query.all()\n    return render_template('admin/listar_quizzes.html', quizzes=quizzes)\n@quiz_admin.route('/crear', methods=['GET', 'POST'])\n@login_required\ndef crear_quiz():\n    form = QuizForm()\n    if form.validate_on_submit():\n        try:\n            # Guardar imagen si se proporcionó",
        "detail": "app.controllers.admin.quiz_controller",
        "documentation": {}
    },
    {
        "label": "crear_quiz",
        "kind": 2,
        "importPath": "app.controllers.admin.quiz_controller",
        "description": "app.controllers.admin.quiz_controller",
        "peekOfCode": "def crear_quiz():\n    form = QuizForm()\n    if form.validate_on_submit():\n        try:\n            # Guardar imagen si se proporcionó\n            imagen_path = None\n            if form.imagen.data:\n                filename = secure_filename(form.imagen.data.filename)\n                imagen_path = os.path.join('quizzes', filename)\n                form.imagen.data.save(os.path.join(Config.UPLOAD_FOLDER, imagen_path))",
        "detail": "app.controllers.admin.quiz_controller",
        "documentation": {}
    },
    {
        "label": "agregar_pregunta",
        "kind": 2,
        "importPath": "app.controllers.admin.quiz_controller",
        "description": "app.controllers.admin.quiz_controller",
        "peekOfCode": "def agregar_pregunta(quiz_id):\n    form = PreguntaForm()\n    quiz = juegos_quiz.query.get_or_404(quiz_id)\n    if form.validate_on_submit():\n        try:\n            nueva_pregunta = QuizPregunta(\n                id_quiz=quiz_id,\n                q_pregunta=form.pregunta.data,\n                opcioncorrecta=form.opcion_correcta.data,\n                opcion2=form.opcion2.data,",
        "detail": "app.controllers.admin.quiz_controller",
        "documentation": {}
    },
    {
        "label": "quiz_admin",
        "kind": 5,
        "importPath": "app.controllers.admin.quiz_controller",
        "description": "app.controllers.admin.quiz_controller",
        "peekOfCode": "quiz_admin = Blueprint('quiz_admin', __name__, url_prefix='/admin/quizzes')\n@quiz_admin.route('/', methods=['GET'])\n@login_required\ndef listar_quizzes():\n    quizzes = juegos_quiz.query.all()\n    return render_template('admin/listar_quizzes.html', quizzes=quizzes)\n@quiz_admin.route('/crear', methods=['GET', 'POST'])\n@login_required\ndef crear_quiz():\n    form = QuizForm()",
        "detail": "app.controllers.admin.quiz_controller",
        "documentation": {}
    },
    {
        "label": "session_scope",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def session_scope():\n    session = db.session\n    try:\n        yield session\n        session.commit()\n    except:\n        session.rollback()\n        raise\n@auth_web.route('/login', methods=['GET', 'POST'], endpoint='login')\n@limiter.limit(\"100 per minute\")",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        password = request.form.get('password', '').strip()\n        if not username or not password:\n            flash('Por favor complete todos los campos', 'error')\n            return render_template('auth/log-in.html', username=username)\n        try:",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def logout():\n    if current_user.is_authenticated:\n        try:\n            # Actualizar última conexión\n            perfil = Perfil.query.filter_by(username=current_user.username).first()\n            if perfil:\n                perfil.ultima_conexion = datetime.now(timezone.utc)\n                db.session.commit()\n                current_app.logger.info(f\"Actualizada última conexión para {current_user.username}\")\n        except Exception as e:",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        email = request.form.get('email', '').strip()\n        password = request.form.get('password', '').strip()\n        confirm_password = request.form.get('confirm_password', '').strip()\n        errors = []\n        if not all([username, email, password, confirm_password]):",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def reset_password():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        password = request.form.get('password')  # Nombre corregido\n        confirm_password = request.form.get('confirm_password')  # Nuevo campo\n        # Validaciones básicas\n        if not all([email, password, confirm_password]):\n            flash('Todos los campos son requeridos', 'error')\n            return redirect(url_for('auth_web.reset_password'))\n        if password != confirm_password:",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "new_password",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def new_password(token):\n    user = User.verify_reset_token(token)\n    if not user:\n        flash('Token inválido o expirado', 'error')\n        return redirect(url_for('auth_web.reset_password'))\n    if request.method == 'POST':\n        password = request.form.get('password')\n        confirm = request.form.get('confirm_password')\n        if not password or password != confirm:\n            flash('Las contraseñas no coinciden o están vacías', 'error')",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "send_reset_email",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def send_reset_email(user):\n    token = user.generate_reset_token()  # Genera un token único con expiración\n    send_email(\n        user.email,\n        'Recuperación de contraseña',\n        'auth/reset_password_email',  # Template HTML del correo\n        user=user,\n        token=token  # Este token se usará para acceder a la vista /new-password/<token>\n    )",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "auth_web",
        "kind": 5,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "auth_web = Blueprint('auth_web', __name__, url_prefix='/auth')\n# Contexto para manejo seguro de sesiones\n@contextmanager\ndef session_scope():\n    session = db.session\n    try:\n        yield session\n        session.commit()\n    except:\n        session.rollback()",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "obtener_quiz",
        "kind": 2,
        "importPath": "app.controllers.game_controller",
        "description": "app.controllers.game_controller",
        "peekOfCode": "def obtener_quiz(juego_id):\n    \"\"\"\n    Obtiene las preguntas de un quiz específico\n    Args:\n        juego_id (int): ID del juego a buscar\n    Returns:\n        dict: Diccionario con título y preguntas del quiz\n        tuple: (dict, int) en caso de error (mensaje, código HTTP)\n    \"\"\"\n    try:",
        "detail": "app.controllers.game_controller",
        "documentation": {}
    },
    {
        "label": "guardar_puntuacion",
        "kind": 2,
        "importPath": "app.controllers.game_controller",
        "description": "app.controllers.game_controller",
        "peekOfCode": "def guardar_puntuacion(data):\n    try:\n        required_keys = ['juego_id', 'puntuacion', 'fecha_inicio', 'fecha_fin']\n        missing = [key for key in required_keys if key not in data]\n        if missing:\n            return {'error': 'Datos incompletos', 'campos_faltantes': missing}, 400\n        try:\n            # Convertir fechas a UTC correctamente\n            juego_id = str(int(data['juego_id']))\n            puntuacion = int(data['puntuacion'])",
        "detail": "app.controllers.game_controller",
        "documentation": {}
    },
    {
        "label": "UserController",
        "kind": 6,
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "peekOfCode": "class UserController:\n    @staticmethod\n    @login_required\n    def update_profile():\n        \"\"\"Endpoint para actualizar el perfil\"\"\"\n        # Regenerar CSRF token para cada solicitud\n        csrf_token = generate_csrf()\n        if request.method == 'POST':\n            # Verificar origen de la solicitud\n            if not request.referrer or request.host not in request.referrer:",
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "QuizForm",
        "kind": 6,
        "importPath": "app.forms.quiz_forms",
        "description": "app.forms.quiz_forms",
        "peekOfCode": "class QuizForm(FlaskForm):\n    titulo = StringField('Título del Quiz', validators=[\n        validators.DataRequired(message=\"El título es obligatorio\"),\n        validators.Length(min=3, max=255, message=\"El título debe tener entre 3 y 255 caracteres\")\n    ])\n    descripcion = TextAreaField('Descripción', validators=[\n        validators.DataRequired(message=\"La descripción es obligatoria\"),\n        validators.Length(min=10, max=500, message=\"La descripción debe tener entre 10 y 500 caracteres\")\n    ])\n    imagen = FileField('Imagen del Quiz', validators=[",
        "detail": "app.forms.quiz_forms",
        "documentation": {}
    },
    {
        "label": "PreguntaForm",
        "kind": 6,
        "importPath": "app.forms.quiz_forms",
        "description": "app.forms.quiz_forms",
        "peekOfCode": "class PreguntaForm(FlaskForm):\n    pregunta = TextAreaField('Texto de la pregunta', validators=[\n        validators.DataRequired(message=\"El texto de la pregunta es obligatorio\"),\n        validators.Length(min=10, max=500, message=\"La pregunta debe tener entre 10 y 500 caracteres\")\n    ])\n    opcioncorrecta = StringField('Opción Correcta', validators=[\n        validators.DataRequired(message=\"Esta opción es obligatoria\"),\n        validators.Length(min=1, max=200, message=\"Máximo 200 caracteres\")\n    ])\n    opcion2 = StringField('Opción 2', validators=[",
        "detail": "app.forms.quiz_forms",
        "documentation": {}
    },
    {
        "label": "BaseModelMixin",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class BaseModelMixin:\n    def to_dict(self):\n        \"\"\"Convierte todas las columnas del modelo a un diccionario\"\"\"\n        return {c.name: getattr(self, c.name) for c in self.__table__.columns}\n#   Clase para User\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(200), nullable=False)\n    # Las siguientes columnas son para cuando este para enviar correos de recuperacion:\n    # reset_token = db.Column(db.String(100), nullable=True)\n    # reset_token_expires = db.Column(db.DateTime, nullable=True)\n    # Método para cambiar la contraseña directamente sin usar un token",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Perfil",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class Perfil(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'perfil'  \n    username = db.Column(db.String(80), db.ForeignKey('users.username'), primary_key=True)\n    fecha_registro = db.Column(db.DateTime, nullable=False)\n    ultima_conexion = db.Column(db.DateTime(timezone=True), nullable=True)\n    juegos_jugados = db.Column(db.String(80), default=0) \nclass intentos(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'intentos'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), db.ForeignKey('users.username'), nullable=False)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class intentos(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'intentos'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), db.ForeignKey('users.username'), nullable=False)\n    juego_id = db.Column(db.Integer, nullable=False)\n    puntaje = db.Column(db.Integer, nullable=False)\n    fecha_inicio = db.Column(db.DateTime(timezone=True), nullable=True)\n    fecha_fin = db.Column(db.DateTime(timezone=True), nullable=True)\nclass juegos_quiz(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'juegos_quiz'",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class juegos_quiz(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'juegos_quiz'\n    id_quiz = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), index=True, nullable = False)\n    descripcion = db.Column(db.String(255), index=True, nullable = False)\n    img_referencia = db.Column(db.String(255), nullable=False)\n    preguntas = db.relationship('QuizPregunta', backref='juego', lazy=True, cascade='all, delete-orphan')\nclass juegos_sim(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'juegos_sim'\n    id_sim = db.Column(db.Integer, primary_key=True, autoincrement=True)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_sim",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class juegos_sim(BaseModelMixin,UserMixin, db.Model):\n    __tablename__ = 'juegos_sim'\n    id_sim = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), index=True, nullable = False)\n    descripcion = db.Column(db.String(255), index=True, nullable = False)\n    img_referencia = db.Column(db.String(255), nullable=False)\nclass juegos_extra(BaseModelMixin, UserMixin, db.Model):\n    __tablename__ = 'juegos_extra'\n    id_extra = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), index=True, nullable = False)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_extra",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class juegos_extra(BaseModelMixin, UserMixin, db.Model):\n    __tablename__ = 'juegos_extra'\n    id_extra = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), index=True, nullable = False)\n    descripcion = db.Column(db.String(255), index=True, nullable = False)\n    img_referencia = db.Column(db.String(255), nullable=False)\nclass QuizPregunta(BaseModelMixin, UserMixin, db.Model):\n    __tablename__ = 'quiz_preguntas'\n    id_pregunta = db.Column(db.Integer, primary_key=True)\n    id_quiz = db.Column(db.Integer, db.ForeignKey('juegos_quiz.id_quiz'))  # FK al juego",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizPregunta",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class QuizPregunta(BaseModelMixin, UserMixin, db.Model):\n    __tablename__ = 'quiz_preguntas'\n    id_pregunta = db.Column(db.Integer, primary_key=True)\n    id_quiz = db.Column(db.Integer, db.ForeignKey('juegos_quiz.id_quiz'))  # FK al juego\n    q_pregunta = db.Column(db.String(500), nullable=False)\n    opcioncorrecta = db.Column(db.String(200), nullable=False)  # Correcta\n    opcion2 = db.Column(db.String(200), nullable=False)\n    opcion3 = db.Column(db.String(200), nullable=False)\n    opcion4 = db.Column(db.String(200), nullable=False)\n    explicacion = db.Column(db.String(500))",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizSimulacion",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class QuizSimulacion(BaseModelMixin, UserMixin, db.Model):\n    __tablename__ = 'quiz_simulacion'\n    id_pregunta = db.Column(db.Integer, primary_key=True)\n    id_sim = db.Column(db.Integer, db.ForeignKey('juegos_sim.id_sim'))  # FK al juego\n    q_pregunta = db.Column(db.String(500), nullable=False)\n    url_sim = db.Column(db.String(500), nullable=False)\n    opcioncorrecta = db.Column(db.String(200), nullable=False)  # Correcta\n    opcion2 = db.Column(db.String(200), nullable=False)\n    opcion3 = db.Column(db.String(200), nullable=False)\n    opcion4 = db.Column(db.String(200), nullable=False)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "QuizExtra",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class QuizExtra(BaseModelMixin, UserMixin, db.Model):\n    __tablename__ = 'quiz_extra'\n    id_pregunta = db.Column(db.Integer, primary_key=True)\n    id_extra = db.Column(db.Integer, db.ForeignKey('juegos_extra.id_extra'))  # FK al juego\n    q_pregunta = db.Column(db.String(500), nullable=False)\n    opcioncorrecta = db.Column(db.String(200), nullable=False)  # Correcta\n    opcion2 = db.Column(db.String(200), nullable=False)\n    opcion3 = db.Column(db.String(200), nullable=False)\n    opcion4 = db.Column(db.String(200), nullable=False)\n    explicacion = db.Column(db.String(500))",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "auth_api",
        "kind": 5,
        "importPath": "app.routes.auth",
        "description": "app.routes.auth",
        "peekOfCode": "auth_api = Blueprint('auth_api', __name__, url_prefix='/api/auth')\n# Definimos las rutas y las funciones asociadas\nauth_api.add_url_rule('/login', view_func=login, methods=['GET', 'POST'])\nauth_api.add_url_rule('/logout', view_func=logout, methods=['GET'])\nauth_api.add_url_rule('/register', view_func=register, methods=['GET', 'POST'])\nauth_api.add_url_rule('/reset-password', view_func=reset_password, methods=['GET', 'POST'])  # Para cambiar la contraseña sin token\nauth_api.add_url_rule('/new-password/<token>', view_func=new_password, methods=['GET', 'POST'])  # Para el flujo basado en token",
        "detail": "app.routes.auth",
        "documentation": {}
    },
    {
        "label": "obtener_juegos",
        "kind": 2,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "def obtener_juegos():\n    categorias = {\n        'quiz': juegos_quiz.query.all(),\n        'simulacion': juegos_sim.query.all(),\n        'extra': juegos_extra.query.all()\n    }\n    return jsonify({\n        cat: [juego.to_dict() for juego in juegos] \n        for cat, juegos in categorias.items()\n    })",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "buscar",
        "kind": 2,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "def buscar():\n    termino = request.args.get('q', '').strip().lower()\n    # if len(termino) < 2:\n    #     return jsonify({\"quiz\": [], \"simulacion\": [], \"extra\": []})\n    try:\n        # Función auxiliar para búsqueda en cualquier modelo\n        def buscar_en_modelo(modelo):\n            return modelo.query.filter(\n                db.or_(\n                    modelo.titulo.ilike(f'%{termino}%'),",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "obtener_quiz",
        "kind": 2,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "def obtener_quiz(juego_id):\n    try:\n        # Verificar existencia del juego\n        juego = juegos_quiz.query.get_or_404(juego_id)\n        # Obtener preguntas\n        preguntas = QuizPregunta.query.filter_by(id_quiz=juego_id).all()\n        # Validar preguntas\n        if not preguntas:\n            current_app.logger.warning(f\"Quiz {juego_id} sin preguntas\")\n            return jsonify({\"error\": \"El quiz no tiene preguntas configuradas\"}), 404",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "obtener_sim",
        "kind": 2,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "def obtener_sim(juego_id):\n    try:\n        # Verificar si el juego existe\n        juego = juegos_sim.query.get(juego_id)\n        if not juego:\n            current_app.logger.error(f\"Juego no encontrado: {juego_id}\")\n            return jsonify({\"error\": \"Juego no encontrado\"}), 404\n        # Obtener preguntas con manejo de errores\n        preguntas = QuizSimulacion.query.filter_by(id_sim=juego_id).all()\n        if not preguntas:",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "guardar_puntuacion",
        "kind": 2,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "def guardar_puntuacion():\n    try:\n        # obtenemos y validamos el token CSRF lanzando si no es válido\n        csrf_token = request.headers.get('X-CSRFToken', '')\n        try:\n            validate_csrf(csrf_token)\n        except ValidationError as ve:\n            current_app.logger.warning(f\"CSRF inválido: {ve}\")\n            return jsonify({\"error\": \"Token CSRF inválido\"}), 403\n        data = request.get_json()",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "csrf",
        "kind": 5,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "csrf = CSRFProtect()  # Inicialización en tu aplicación\ngames_bp = Blueprint('games', __name__, url_prefix='/games')\n# === Rutas para la tabla juegos_quiz ===\n@games_bp.route('/api/juegos')\n@limiter.limit(\"10 per minute\")\ndef obtener_juegos():\n    categorias = {\n        'quiz': juegos_quiz.query.all(),\n        'simulacion': juegos_sim.query.all(),\n        'extra': juegos_extra.query.all()",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "games_bp",
        "kind": 5,
        "importPath": "app.routes.games",
        "description": "app.routes.games",
        "peekOfCode": "games_bp = Blueprint('games', __name__, url_prefix='/games')\n# === Rutas para la tabla juegos_quiz ===\n@games_bp.route('/api/juegos')\n@limiter.limit(\"10 per minute\")\ndef obtener_juegos():\n    categorias = {\n        'quiz': juegos_quiz.query.all(),\n        'simulacion': juegos_sim.query.all(),\n        'extra': juegos_extra.query.all()\n    }",
        "detail": "app.routes.games",
        "documentation": {}
    },
    {
        "label": "inicio",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def inicio():\n    return render_template('main/main-page.html')\n@main_bp.route('/iniciar-sesion')\n@limiter.limit(\"100 per minute\")\ndef iniciodesesion():\n    # Redirigir a la ruta de login dentro del Blueprint 'auth_web'\n    return redirect(url_for('auth_web.login'))\n@main_bp.route('/registro')\n@limiter.limit(\"20 per minute\")\ndef registro():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "iniciodesesion",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def iniciodesesion():\n    # Redirigir a la ruta de login dentro del Blueprint 'auth_web'\n    return redirect(url_for('auth_web.login'))\n@main_bp.route('/registro')\n@limiter.limit(\"20 per minute\")\ndef registro():\n    # Redirigir a la ruta de registro dentro del Blueprint 'auth_web'\n    return redirect(url_for('auth_web.register'))\n@main_bp.route('/terminos')\ndef terminos():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "registro",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def registro():\n    # Redirigir a la ruta de registro dentro del Blueprint 'auth_web'\n    return redirect(url_for('auth_web.register'))\n@main_bp.route('/terminos')\ndef terminos():\n    return render_template('main/terminos.html')\n@main_bp.route('/privacidad')\ndef privacidad():\n    return render_template('main/politicas.html')\n# ──────── RUTAS PRIVADAS ────────",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "terminos",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def terminos():\n    return render_template('main/terminos.html')\n@main_bp.route('/privacidad')\ndef privacidad():\n    return render_template('main/politicas.html')\n# ──────── RUTAS PRIVADAS ────────\n@main_bp.route('/index')\n@login_required\ndef index():\n    quiz_games = juegos_quiz.query.all()",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "privacidad",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def privacidad():\n    return render_template('main/politicas.html')\n# ──────── RUTAS PRIVADAS ────────\n@main_bp.route('/index')\n@login_required\ndef index():\n    quiz_games = juegos_quiz.query.all()\n    sim_games = juegos_sim.query.all()\n    extra_games = juegos_extra.query.all()\n    return render_template('main/menu.html',",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def index():\n    quiz_games = juegos_quiz.query.all()\n    sim_games = juegos_sim.query.all()\n    extra_games = juegos_extra.query.all()\n    return render_template('main/menu.html',\n                           user=current_user,\n                           quiz_games=quiz_games,\n                           sim_games=sim_games,\n                           extra_games=extra_games)\n@main_bp.route('/juego')",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "ver_juego",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def ver_juego(juego_id=None):\n    if juego_id is None:\n        abort(400, description=\"ID de juego no proporcionado\")\n    if juego_id < 100000:\n        juego = juegos_quiz.query.get(juego_id)\n        tipo = 'quiz'\n    elif juego_id < 200000:\n        juego = juegos_sim.query.get(juego_id)\n        tipo = 'simulacion'\n    else:",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "obtener_tipo_juego",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def obtener_tipo_juego(juego_id):\n    \"\"\"Obtiene el tipo de juego dependiendo del ID del juego.\"\"\"\n    if 1 <= juego_id <= 99999:\n        return juegos_quiz.query.get(juego_id)\n    elif 100000 <= juego_id <= 200000:  \n        return juegos_sim.query.get(juego_id)\n    elif 200000 <= juego_id <= 300000:  \n        return juegos_extra.query.get(juego_id)\n    else:\n        return None",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "jugar_juegoextra",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def jugar_juegoextra():\n    return render_template('game/juegoextra.html')\n@main_bp.route('/perfil')\n@login_required\ndef perfil():\n    \"\"\"Vista del perfil del usuario.\"\"\"\n    try:\n        user_profile = Perfil.query.filter_by(username=current_user.username).first()\n        if not user_profile:\n            flash(\"No se encontró perfil para este usuario\", \"warning\")",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "perfil",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def perfil():\n    \"\"\"Vista del perfil del usuario.\"\"\"\n    try:\n        user_profile = Perfil.query.filter_by(username=current_user.username).first()\n        if not user_profile:\n            flash(\"No se encontró perfil para este usuario\", \"warning\")\n            return redirect(url_for('main.index'))\n        # Obtener todos los intentos del usuario ordenados por fecha\n        intentos_query = intentos.query.filter_by(username=current_user.username)\\\n                                    .order_by(intentos.fecha_fin.desc())\\",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "actualizar_perfil",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def actualizar_perfil():\n    return UserController.update_profile()",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "main_bp",
        "kind": 5,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "main_bp = Blueprint('main', __name__)\n# ──────── RUTAS PÚBLICAS ────────\n@main_bp.route('/')\n@limiter.limit(\"100 per minute\")\ndef inicio():\n    return render_template('main/main-page.html')\n@main_bp.route('/iniciar-sesion')\n@limiter.limit(\"100 per minute\")\ndef iniciodesesion():\n    # Redirigir a la ruta de login dentro del Blueprint 'auth_web'",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def is_valid_email(email: str) -> bool:\n    \"\"\"Valida el formato del correo electrónico.\"\"\"\n    return bool(re.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$', email))\ndef is_valid_username(username: str) -> bool:\n    \"\"\"Valida que el nombre de usuario tenga entre 3 y 20 caracteres alfanuméricos o guiones bajos.\"\"\"\n    return bool(re.match(r'^[a-zA-Z0-9_]{3,20}$', username))\ndef is_strong_password(password: str) -> bool:\n    \"\"\"Valida que la contraseña sea fuerte: mínimo 8 caracteres, al menos 1 mayúscula y 1 número.\"\"\"\n    return (\n        len(password) >= 8 and",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_valid_username",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def is_valid_username(username: str) -> bool:\n    \"\"\"Valida que el nombre de usuario tenga entre 3 y 20 caracteres alfanuméricos o guiones bajos.\"\"\"\n    return bool(re.match(r'^[a-zA-Z0-9_]{3,20}$', username))\ndef is_strong_password(password: str) -> bool:\n    \"\"\"Valida que la contraseña sea fuerte: mínimo 8 caracteres, al menos 1 mayúscula y 1 número.\"\"\"\n    return (\n        len(password) >= 8 and\n        any(c.isupper() for c in password) and\n        any(c.isdigit() for c in password)\n    )",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_strong_password",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def is_strong_password(password: str) -> bool:\n    \"\"\"Valida que la contraseña sea fuerte: mínimo 8 caracteres, al menos 1 mayúscula y 1 número.\"\"\"\n    return (\n        len(password) >= 8 and\n        any(c.isupper() for c in password) and\n        any(c.isdigit() for c in password)\n    )\ndef send_reset_email(user) -> bool:\n    \"\"\"Envía un correo de restablecimiento de contraseña al usuario.\"\"\"\n    token = secrets.token_urlsafe(32)",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "send_reset_email",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def send_reset_email(user) -> bool:\n    \"\"\"Envía un correo de restablecimiento de contraseña al usuario.\"\"\"\n    token = secrets.token_urlsafe(32)\n    user.reset_token = token\n    user.token_expiration = datetime.utcnow() + timedelta(hours=1)\n    db.session.commit()\n    link = url_for('auth.reset_password', token=token, _external=True)\n    body = f\"\"\"Hola {user.username},\nHas solicitado restablecer tu contraseña. Haz clic en el siguiente enlace para continuar:\n{link}",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "class UserService:\n    @staticmethod\n    def save_user_score(user: User, score: str) -> Tuple[bool, str]:\n        \"\"\"Guarda la puntuación del usuario en la base de datos.\n        Args:\n            user (User): Objeto del usuario.\n            score (str): Puntuación a guardar.\n        Returns:\n            Tuple[bool, str]: Resultado de la operación y mensaje.\n        \"\"\"",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass UserService:\n    @staticmethod\n    def save_user_score(user: User, score: str) -> Tuple[bool, str]:\n        \"\"\"Guarda la puntuación del usuario en la base de datos.\n        Args:\n            user (User): Objeto del usuario.\n            score (str): Puntuación a guardar.\n        Returns:\n            Tuple[bool, str]: Resultado de la operación y mensaje.",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "ensure_db_exists",
        "kind": 2,
        "importPath": "app.utils.database",
        "description": "app.utils.database",
        "peekOfCode": "def ensure_db_exists(app: Flask) -> None:\n    \"\"\"\n    Asegura que el archivo de base de datos SQLite existe y tiene los permisos adecuados.\n    Args:\n        app: Instancia de la aplicación Flask\n    Raises:\n        OSError: Si no se pueden crear los directorios o archivos necesarios\n        Exception: Para otros errores inesperados\n    \"\"\"\n    db_path = os.path.join(app.instance_path, 'app.db')",
        "detail": "app.utils.database",
        "documentation": {}
    },
    {
        "label": "session_scope",
        "kind": 2,
        "importPath": "app.utils.database",
        "description": "app.utils.database",
        "peekOfCode": "def session_scope() -> Generator[Session, None, None]:\n    \"\"\"\n    Proporciona un ámbito transaccional seguro para operaciones con la base de datos.\n    Uso:\n        with session_scope() as session:\n            # operaciones con la sesión\n    Yields:\n        Session: Sesión de SQLAlchemy\n    Raises:\n        SQLAlchemyError: Si ocurre algún error durante la transacción",
        "detail": "app.utils.database",
        "documentation": {}
    },
    {
        "label": "safe_db_operation",
        "kind": 2,
        "importPath": "app.utils.database",
        "description": "app.utils.database",
        "peekOfCode": "def safe_db_operation(func: Callable[[], T], max_retries: int = 3) -> T:\n    \"\"\"\n    Ejecuta operaciones de base de datos con reintentos automáticos para errores transitorios.\n    Args:\n        func: Función que realiza la operación de base de datos\n        max_retries: Número máximo de reintentos (default: 3)\n    Returns:\n        El resultado de la función si es exitosa\n    Raises:\n        OperationalError: Si persisten los errores después de los reintentos",
        "detail": "app.utils.database",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "app.utils.database",
        "description": "app.utils.database",
        "peekOfCode": "T = TypeVar('T')\ndef ensure_db_exists(app: Flask) -> None:\n    \"\"\"\n    Asegura que el archivo de base de datos SQLite existe y tiene los permisos adecuados.\n    Args:\n        app: Instancia de la aplicación Flask\n    Raises:\n        OSError: Si no se pueden crear los directorios o archivos necesarios\n        Exception: Para otros errores inesperados\n    \"\"\"",
        "detail": "app.utils.database",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "kind": 2,
        "importPath": "app.utils.logging",
        "description": "app.utils.logging",
        "peekOfCode": "def configure_logging(app):\n    \"\"\"Configura el sistema de logging de la aplicación.\"\"\"\n    # Configuración de la carpeta de logs\n    log_folder = os.path.join(app.instance_path, app.config['LOG_FOLDER'])\n    # Asegurarse de que el directorio de logs exista y tenga permisos adecuados\n    try:\n        os.makedirs(log_folder, exist_ok=True)\n        # Aseguramos que los permisos sean correctos\n        os.chmod(log_folder, 0o755)\n    except Exception as e:",
        "detail": "app.utils.logging",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Config:\n    \"\"\"Configuración base de la aplicación Flask\"\"\"\n    # -------------------------------\n    # Configuración de Seguridad\n    # -------------------------------\n    SECRET_KEY = os.getenv('FLASK_SECRET_KEY', secrets.token_urlsafe(64))\n    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', secrets.token_urlsafe(64))\n    # Configuración de cookies seguras\n    SESSION_COOKIE_SECURE = True  # Requiere HTTPS en producción\n    SESSION_COOKIE_HTTPONLY = True",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "configure_db_engine",
        "kind": 2,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "def configure_db_engine(app: Flask) -> None:\n    \"\"\"\n    Configura el motor de la base de datos con manejo avanzado de conexiones.\n    Parámetros:\n        app (Flask): Instancia de la aplicación Flask\n    Características:\n        - Ping periódico para verificar conexiones activas\n        - Reconexión automática en caso de fallos\n        - Manejo de errores de conexión\n    \"\"\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "configure_extensions",
        "kind": 2,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "def configure_extensions(app: Flask) -> None:\n    \"\"\"\n    Configura todas las extensiones de la aplicación.\n    Parámetros:\n        app (Flask): Instancia de la aplicación Flask\n    \"\"\"\n    # Configuración básica de Flask-Login\n    login_manager.login_view = 'auth.login'  # Ruta a la vista de login\n    login_manager.session_protection = \"strong\"  # Protección de sesión\n    # Configuración de JWT",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "db = SQLAlchemy()\nlogin_manager = LoginManager()\njwt = JWTManager()\ncsrf = CSRFProtect()\ncsp = {\n        'default-src': \"'self'\",\n        'style-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'script-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'img-src': [\"'self'\", \"data:\", \"https://*\"],\n        'font-src': [\"'self'\", \"https://cdn.jsdelivr.net\"]",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager = LoginManager()\njwt = JWTManager()\ncsrf = CSRFProtect()\ncsp = {\n        'default-src': \"'self'\",\n        'style-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'script-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'img-src': [\"'self'\", \"data:\", \"https://*\"],\n        'font-src': [\"'self'\", \"https://cdn.jsdelivr.net\"]\n    }",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "jwt = JWTManager()\ncsrf = CSRFProtect()\ncsp = {\n        'default-src': \"'self'\",\n        'style-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'script-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'img-src': [\"'self'\", \"data:\", \"https://*\"],\n        'font-src': [\"'self'\", \"https://cdn.jsdelivr.net\"]\n    }\ntalisman = Talisman(",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "csrf",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "csrf = CSRFProtect()\ncsp = {\n        'default-src': \"'self'\",\n        'style-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'script-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'img-src': [\"'self'\", \"data:\", \"https://*\"],\n        'font-src': [\"'self'\", \"https://cdn.jsdelivr.net\"]\n    }\ntalisman = Talisman(\n    content_security_policy=csp,",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "csp",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "csp = {\n        'default-src': \"'self'\",\n        'style-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'script-src': [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\"],\n        'img-src': [\"'self'\", \"data:\", \"https://*\"],\n        'font-src': [\"'self'\", \"https://cdn.jsdelivr.net\"]\n    }\ntalisman = Talisman(\n    content_security_policy=csp,\n    force_https=os.getenv('FLASK_ENV') == 'production',",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "talisman",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "talisman = Talisman(\n    content_security_policy=csp,\n    force_https=os.getenv('FLASK_ENV') == 'production',\n    force_https_permanent=os.getenv('FLASK_ENV') == 'production'\n)\n# Configuración del rate limiter con valores por defecto seguros\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],  # Límites razonables por defecto\n    storage_uri=\"memory://\",  # Almacenamiento en memoria para desarrollo",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "limiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],  # Límites razonables por defecto\n    storage_uri=\"memory://\",  # Almacenamiento en memoria para desarrollo\n    strategy=\"fixed-window\",  # Estrategia de ventana fija\n    headers_enabled=True  # Mostrar headers de límites en respuestas\n)\n# --------------------------------------------------\n# Configuración avanzada de la base de datos\n# --------------------------------------------------",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "def home():\n    return render_template('index.html')",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "app.routes",
        "description": "app.routes",
        "peekOfCode": "main = Blueprint('main', __name__)\n@main.route('/')\ndef home():\n    return render_template('index.html')",
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "migrar_quizzes",
        "kind": 2,
        "importPath": "ejecutar_migracion",
        "description": "ejecutar_migracion",
        "peekOfCode": "def migrar_quizzes():\n    app = create_app()\n    with app.app_context():\n        try:\n            for juego_id in range(1, 3):  # Para los juegos 1 y 2\n                # Forma recomendada SQLAlchemy 2.0\n                juego = db.session.get(juegos_quiz, juego_id)\n                if not juego:\n                    juego = juegos_quiz(\n                        id_quiz=juego_id,",
        "detail": "ejecutar_migracion",
        "documentation": {}
    },
    {
        "label": "quizzes",
        "kind": 5,
        "importPath": "ejecutar_migracion",
        "description": "ejecutar_migracion",
        "peekOfCode": "quizzes = {\n    1: [\n    {\n        \"texto\": \"¿Qué significa una luz roja en un semáforo?\",\n        \"opciones\": [\n        \"Avanzar con precaución\",\n        \"Detenerse\",\n        \"Girar a la derecha\",\n        \"Cruzar rápido\",\n        ],",
        "detail": "ejecutar_migracion",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    # Configura el host y puerto para que la aplicación sea accesible desde cualquier lugar\n    # y habilita el modo debug solo en desarrollo.\n    app.run(debug=True)\n    #el de abajo es un intento para usar el dominio con una pc en local\n    # app.run(debug=True, ssl_context=('superiorteam.site.pem', 'superiorteam.site-key.pem'), host=\"0.0.0.0\", port=5000, ssl_context='adhoc')",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "get_venv_python",
        "kind": 2,
        "importPath": "run_env",
        "description": "run_env",
        "peekOfCode": "def get_venv_python():\n    \"\"\"Retorna la ruta del ejecutable Python dentro del entorno virtual.\"\"\"\n    if platform.system() == \"Windows\":\n        return os.path.join(\"venv\", \"Scripts\", \"python.exe\")\n    else:\n        return os.path.join(\"venv\", \"bin\", \"python\")\nVENV_PATH = os.path.join(os.path.dirname(__file__), 'venv')  # Ruta del entorno virtual\nPYTHON_BIN = get_venv_python()\ndef is_using_virtualenv():\n    \"\"\"Verifica si el entorno actual está usando el entorno virtual.\"\"\"",
        "detail": "run_env",
        "documentation": {}
    },
    {
        "label": "is_using_virtualenv",
        "kind": 2,
        "importPath": "run_env",
        "description": "run_env",
        "peekOfCode": "def is_using_virtualenv():\n    \"\"\"Verifica si el entorno actual está usando el entorno virtual.\"\"\"\n    return os.path.commonpath([sys.prefix, VENV_PATH]) == VENV_PATH\ndef create_virtualenv():\n    \"\"\"Crea un entorno virtual si no existe.\"\"\"\n    print(\"Entorno virtual no encontrado. Creando entorno virtual...\")\n    subprocess.check_call([sys.executable, '-m', 'venv', VENV_PATH])\ndef install_requirements():\n    \"\"\"Instala las dependencias desde requirements.txt.\"\"\"\n    print(\"Instalando dependencias desde requirements.txt...\")",
        "detail": "run_env",
        "documentation": {}
    },
    {
        "label": "create_virtualenv",
        "kind": 2,
        "importPath": "run_env",
        "description": "run_env",
        "peekOfCode": "def create_virtualenv():\n    \"\"\"Crea un entorno virtual si no existe.\"\"\"\n    print(\"Entorno virtual no encontrado. Creando entorno virtual...\")\n    subprocess.check_call([sys.executable, '-m', 'venv', VENV_PATH])\ndef install_requirements():\n    \"\"\"Instala las dependencias desde requirements.txt.\"\"\"\n    print(\"Instalando dependencias desde requirements.txt...\")\n    pip_executable = os.path.join(VENV_PATH, 'Scripts', 'pip') if os.name == 'nt' else os.path.join(VENV_PATH, 'bin', 'pip')\n    subprocess.check_call([pip_executable, 'install', '-r', 'requirements.txt'])\nif __name__ == \"__main__\":",
        "detail": "run_env",
        "documentation": {}
    },
    {
        "label": "install_requirements",
        "kind": 2,
        "importPath": "run_env",
        "description": "run_env",
        "peekOfCode": "def install_requirements():\n    \"\"\"Instala las dependencias desde requirements.txt.\"\"\"\n    print(\"Instalando dependencias desde requirements.txt...\")\n    pip_executable = os.path.join(VENV_PATH, 'Scripts', 'pip') if os.name == 'nt' else os.path.join(VENV_PATH, 'bin', 'pip')\n    subprocess.check_call([pip_executable, 'install', '-r', 'requirements.txt'])\nif __name__ == \"__main__\":\n    if not is_using_virtualenv():\n        if not os.path.exists(VENV_PATH):\n            create_virtualenv()\n        # Activar el entorno virtual en Windows",
        "detail": "run_env",
        "documentation": {}
    },
    {
        "label": "VENV_PATH",
        "kind": 5,
        "importPath": "run_env",
        "description": "run_env",
        "peekOfCode": "VENV_PATH = os.path.join(os.path.dirname(__file__), 'venv')  # Ruta del entorno virtual\nPYTHON_BIN = get_venv_python()\ndef is_using_virtualenv():\n    \"\"\"Verifica si el entorno actual está usando el entorno virtual.\"\"\"\n    return os.path.commonpath([sys.prefix, VENV_PATH]) == VENV_PATH\ndef create_virtualenv():\n    \"\"\"Crea un entorno virtual si no existe.\"\"\"\n    print(\"Entorno virtual no encontrado. Creando entorno virtual...\")\n    subprocess.check_call([sys.executable, '-m', 'venv', VENV_PATH])\ndef install_requirements():",
        "detail": "run_env",
        "documentation": {}
    },
    {
        "label": "PYTHON_BIN",
        "kind": 5,
        "importPath": "run_env",
        "description": "run_env",
        "peekOfCode": "PYTHON_BIN = get_venv_python()\ndef is_using_virtualenv():\n    \"\"\"Verifica si el entorno actual está usando el entorno virtual.\"\"\"\n    return os.path.commonpath([sys.prefix, VENV_PATH]) == VENV_PATH\ndef create_virtualenv():\n    \"\"\"Crea un entorno virtual si no existe.\"\"\"\n    print(\"Entorno virtual no encontrado. Creando entorno virtual...\")\n    subprocess.check_call([sys.executable, '-m', 'venv', VENV_PATH])\ndef install_requirements():\n    \"\"\"Instala las dependencias desde requirements.txt.\"\"\"",
        "detail": "run_env",
        "documentation": {}
    },
    {
        "label": "parse_db_url",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def parse_db_url(db_url):\n    parsed = urlparse(db_url)\n    return {\n        \"host\": parsed.hostname,\n        \"port\": parsed.port or 3306,\n        \"user\": parsed.username,\n        \"password\": parsed.password,\n        \"database\": parsed.path.lstrip('/').split('?')[0]\n    }\ntry:",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "wsgi",
        "description": "wsgi",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    # Configura el host y puerto para que la aplicación sea accesible desde cualquier lugar\n    # y habilita el modo debug solo en desarrollo.\n    #app.run(debug=True)\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "wsgi",
        "documentation": {}
    }
]