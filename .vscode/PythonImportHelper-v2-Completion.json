[
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_valid_username",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_strong_password",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "send_reset_email",
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "isExtraImport": true,
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DisconnectionError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "isExtraImport": true,
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DDL",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "recover",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "isExtraImport": true,
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "UserController",
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "isExtraImport": true,
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "flask_limiter",
        "description": "flask_limiter",
        "isExtraImport": true,
        "detail": "flask_limiter",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "flask_limiter.util",
        "description": "flask_limiter.util",
        "isExtraImport": true,
        "detail": "flask_limiter.util",
        "documentation": {}
    },
    {
        "label": "Talisman",
        "importPath": "flask_talisman",
        "description": "flask_talisman",
        "isExtraImport": true,
        "detail": "flask_talisman",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        password = request.form.get('password', '').strip()\n        if not username or not password:\n            flash('Por favor complete todos los campos', 'error')\n            return redirect(url_for('auth.login'))\n        try:",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def logout():\n    logout_user()\n    flash('Has cerrado sesión correctamente', 'success')\n    return redirect(url_for('main.index'))\n@auth.route('/register', methods=['GET', 'POST'], endpoint=\"register\")\n@limiter.limit(\"10 per minute\")\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        email = request.form.get('email', '').strip()\n        password = request.form.get('password', '').strip()\n        confirm_password = request.form.get('confirm_password', '').strip()\n        errors = []\n        if not all([username, email, password, confirm_password]):",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "recover",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def recover():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':\n        email = request.form.get('email', '').strip()\n        if not is_valid_email(email):\n            flash('Correo electrónico inválido', 'error')\n            return redirect(url_for('auth.recover'))\n        user = User.query.filter_by(email=email).first()\n        if user:",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "def reset_password(token):\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    user = User.verify_reset_token(token)\n    if not user:\n        flash('Token inválido o expirado', 'error')\n        return redirect(url_for('auth.recover'))\n    if request.method == 'POST':\n        password = request.form.get('password', '').strip()\n        confirm_password = request.form.get('confirm_password', '').strip()",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "app.controllers.auth_controller",
        "description": "app.controllers.auth_controller",
        "peekOfCode": "auth = Blueprint('auth', __name__)\n@auth.route('/login', methods=['GET', 'POST'], endpoint='login')\n@limiter.limit(\"10 per minute\")\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        password = request.form.get('password', '').strip()\n        if not username or not password:",
        "detail": "app.controllers.auth_controller",
        "documentation": {}
    },
    {
        "label": "UserController",
        "kind": 6,
        "importPath": "app.controllers.user_controller",
        "description": "app.controllers.user_controller",
        "peekOfCode": "class UserController:\n    @staticmethod\n    @login_required\n    @limiter.limit(\"10 per minute\")\n    def save_score():\n        \"\"\"Endpoint para guardar puntuación del usuario actual.\"\"\"\n        if request.method == 'POST':\n            score = request.form.get('score') or request.form.get('puntuacion')\n            score = score.strip() if score else None\n            if not score or not score.isdigit():",
        "detail": "app.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(200), nullable=False)\n    def set_password(self, password):\n        self.password_hash = bcrypt.hashpw(\n            password.encode('utf-8'), \n            bcrypt.gensalt()",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Perfil",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class Perfil(UserMixin, db.Model):\n    __tablename__ = 'perfil'  \n    username = db.Column(db.String(80), db.ForeignKey('users.username'), primary_key=True)\n    fecha_registro = db.Column(db.DateTime)\n    ultima_conexion = db.Column(db.DateTime)\n    juegos_jugados = db.Column(db.Integer, default=0) \nclass intentos(UserMixin, db.Model):\n    __tablename__ = 'intentos'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), db.ForeignKey('users.username'), nullable=False)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class intentos(UserMixin, db.Model):\n    __tablename__ = 'intentos'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), db.ForeignKey('users.username'), nullable=False)\n    juego_id = db.Column(db.Integer, nullable=False)\n    puntaje = db.Column(db.Integer, nullable=False)\n    fecha_inicio = db.Column(db.DateTime)\n    fecha_fin = db.Column(db.DateTime)\nclass juegos_quiz(UserMixin, db.Model):\n    __tablename__ = 'juegos_quiz'",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_quiz",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class juegos_quiz(UserMixin, db.Model):\n    __tablename__ = 'juegos_quiz'\n    id_quiz = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), nullable = False)\n    descripcion = db.Column(db.String(255), nullable=False)\n    img_referencia = db.Column(db.String(255), nullable=False)\nclass juegos_sim(UserMixin, db.Model):\n    __tablename__ = 'juegos_sim'\n    id_sim = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), nullable = False)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_sim",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class juegos_sim(UserMixin, db.Model):\n    __tablename__ = 'juegos_sim'\n    id_sim = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), nullable = False)\n    descripcion = db.Column(db.String(255), nullable=False)\n    img_referencia = db.Column(db.String(255), nullable=False)\nevent.listen(\n    juegos_sim.__table__,\n    'after_create',\n    DDL(\"ALTER TABLE juegos_sim AUTO_INCREMENT = 100000;\")",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "juegos_extra",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class juegos_extra(UserMixin, db.Model):\n    __tablename__ = 'juegos_extra'\n    id_extra = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    titulo = db.Column(db.String(255), nullable = False)\n    descripcion = db.Column(db.String(255), nullable=False)\n    img_referencia = db.Column(db.String(255), nullable=False)\nevent.listen(\n    juegos_extra.__table__,\n    'after_create',\n    DDL(\"ALTER TABLE juegos_extra AUTO_INCREMENT = 200000;\")",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "app.routes.auth",
        "description": "app.routes.auth",
        "peekOfCode": "auth_bp = Blueprint('auth', __name__, url_prefix='/auth')\n# Definimos las rutas y las funciones asociadas\nauth_bp.add_url_rule('/login', view_func=login, methods=['GET', 'POST'])\nauth_bp.add_url_rule('/logout', view_func=logout, methods=['GET'])\nauth_bp.add_url_rule('/register', view_func=register, methods=['GET', 'POST'])\nauth_bp.add_url_rule('/recover', view_func=recover, methods=['GET', 'POST'])\nauth_bp.add_url_rule('/reset_password', view_func=reset_password, methods=['GET', 'POST'])",
        "detail": "app.routes.auth",
        "documentation": {}
    },
    {
        "label": "inicio",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def inicio():\n    return render_template('main/main-page.html')\n@main_bp.route('/iniciar-sesion')\ndef iniciodesesion():\n    return redirect(url_for('auth.login'))\n@main_bp.route('/registro')\ndef registro():\n    return redirect(url_for('auth.register'))\n@main_bp.route('/terminos')\ndef terminos():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "iniciodesesion",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def iniciodesesion():\n    return redirect(url_for('auth.login'))\n@main_bp.route('/registro')\ndef registro():\n    return redirect(url_for('auth.register'))\n@main_bp.route('/terminos')\ndef terminos():\n    return render_template('main/terminos.html')\n@main_bp.route('/privacidad')\ndef privacidad():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "registro",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def registro():\n    return redirect(url_for('auth.register'))\n@main_bp.route('/terminos')\ndef terminos():\n    return render_template('main/terminos.html')\n@main_bp.route('/privacidad')\ndef privacidad():\n    return render_template('main/politicas.html')\n# ──────── RUTAS PRIVADAS ────────\n@main_bp.route('/index')",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "terminos",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def terminos():\n    return render_template('main/terminos.html')\n@main_bp.route('/privacidad')\ndef privacidad():\n    return render_template('main/politicas.html')\n# ──────── RUTAS PRIVADAS ────────\n@main_bp.route('/index')\n@login_required\ndef index():\n    return render_template('main/menu.html', user=current_user)",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "privacidad",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def privacidad():\n    return render_template('main/politicas.html')\n# ──────── RUTAS PRIVADAS ────────\n@main_bp.route('/index')\n@login_required\ndef index():\n    return render_template('main/menu.html', user=current_user)\n@main_bp.route('/perfil')\n@login_required\n@limiter.limit(\"30 per minute\")",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def index():\n    return render_template('main/menu.html', user=current_user)\n@main_bp.route('/perfil')\n@login_required\n@limiter.limit(\"30 per minute\")\ndef perfil():\n    return render_template('main/profile.html', user=current_user)\n@main_bp.route('/juego')\n@login_required\ndef juego():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "perfil",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def perfil():\n    return render_template('main/profile.html', user=current_user)\n@main_bp.route('/juego')\n@login_required\ndef juego():\n    return render_template('game/game.html', user=current_user)\n# ──────── API: FUNCIONES DEL USUARIO ────────\n@main_bp.route('/save-score', methods=['POST'])\n@login_required\ndef save_score():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "juego",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def juego():\n    return render_template('game/game.html', user=current_user)\n# ──────── API: FUNCIONES DEL USUARIO ────────\n@main_bp.route('/save-score', methods=['POST'])\n@login_required\ndef save_score():\n    return UserController.save_score()\n@main_bp.route('/guardar-puntuacion', methods=['POST'])\n@login_required\ndef guardar_puntuacion():",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "save_score",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def save_score():\n    return UserController.save_score()\n@main_bp.route('/guardar-puntuacion', methods=['POST'])\n@login_required\ndef guardar_puntuacion():\n    return UserController.save_score()\n@main_bp.route('/actualizar_perfil', methods=['POST'])\n@login_required\ndef actualizar_perfil():\n    return UserController.update_profile()",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "guardar_puntuacion",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def guardar_puntuacion():\n    return UserController.save_score()\n@main_bp.route('/actualizar_perfil', methods=['POST'])\n@login_required\ndef actualizar_perfil():\n    return UserController.update_profile()",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "actualizar_perfil",
        "kind": 2,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "def actualizar_perfil():\n    return UserController.update_profile()",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "main_bp",
        "kind": 5,
        "importPath": "app.routes.main",
        "description": "app.routes.main",
        "peekOfCode": "main_bp = Blueprint('main', __name__)\n# ──────── RUTAS PÚBLICAS ────────\n@main_bp.route('/')\n@limiter.limit(\"100 per minute\")\ndef inicio():\n    return render_template('main/main-page.html')\n@main_bp.route('/iniciar-sesion')\ndef iniciodesesion():\n    return redirect(url_for('auth.login'))\n@main_bp.route('/registro')",
        "detail": "app.routes.main",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def is_valid_email(email: str) -> bool:\n    \"\"\"Valida el formato del correo electrónico.\"\"\"\n    return bool(re.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,}$', email))\ndef is_valid_username(username: str) -> bool:\n    \"\"\"Valida que el nombre de usuario tenga entre 3 y 20 caracteres alfanuméricos o guiones bajos.\"\"\"\n    return bool(re.match(r'^[a-zA-Z0-9_]{3,20}$', username))\ndef is_strong_password(password: str) -> bool:\n    \"\"\"Valida que la contraseña sea fuerte: mínimo 8 caracteres, al menos 1 mayúscula y 1 número.\"\"\"\n    return (\n        len(password) >= 8 and",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_valid_username",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def is_valid_username(username: str) -> bool:\n    \"\"\"Valida que el nombre de usuario tenga entre 3 y 20 caracteres alfanuméricos o guiones bajos.\"\"\"\n    return bool(re.match(r'^[a-zA-Z0-9_]{3,20}$', username))\ndef is_strong_password(password: str) -> bool:\n    \"\"\"Valida que la contraseña sea fuerte: mínimo 8 caracteres, al menos 1 mayúscula y 1 número.\"\"\"\n    return (\n        len(password) >= 8 and\n        any(c.isupper() for c in password) and\n        any(c.isdigit() for c in password)\n    )",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "is_strong_password",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def is_strong_password(password: str) -> bool:\n    \"\"\"Valida que la contraseña sea fuerte: mínimo 8 caracteres, al menos 1 mayúscula y 1 número.\"\"\"\n    return (\n        len(password) >= 8 and\n        any(c.isupper() for c in password) and\n        any(c.isdigit() for c in password)\n    )\ndef send_reset_email(user) -> bool:\n    \"\"\"Envía un correo de restablecimiento de contraseña al usuario.\"\"\"\n    token = secrets.token_urlsafe(32)",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "send_reset_email",
        "kind": 2,
        "importPath": "app.services.auth_service",
        "description": "app.services.auth_service",
        "peekOfCode": "def send_reset_email(user) -> bool:\n    \"\"\"Envía un correo de restablecimiento de contraseña al usuario.\"\"\"\n    token = secrets.token_urlsafe(32)\n    user.reset_token = token\n    user.token_expiration = datetime.utcnow() + timedelta(hours=1)\n    db.session.commit()\n    link = url_for('auth.reset_password', token=token, _external=True)\n    body = f\"\"\"Hola {user.username},\nHas solicitado restablecer tu contraseña. Haz clic en el siguiente enlace para continuar:\n{link}",
        "detail": "app.services.auth_service",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "class UserService:\n    @staticmethod\n    def save_user_score(user: User, score: str) -> Tuple[bool, str]:\n        \"\"\"Guarda la puntuación del usuario.\"\"\"\n        try:\n            # Validar si score es un número entero antes de asignarlo\n            if not score.isdigit():\n                return False, \"La puntuación debe ser un número válido\"\n            score = int(score)\n            if score < 0:",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass UserService:\n    @staticmethod\n    def save_user_score(user: User, score: str) -> Tuple[bool, str]:\n        \"\"\"Guarda la puntuación del usuario.\"\"\"\n        try:\n            # Validar si score es un número entero antes de asignarlo\n            if not score.isdigit():\n                return False, \"La puntuación debe ser un número válido\"\n            score = int(score)",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "ensure_db_exists",
        "kind": 2,
        "importPath": "app.utils.database",
        "description": "app.utils.database",
        "peekOfCode": "def ensure_db_exists(app):\n    \"\"\"Asegura que el archivo de base de datos existe y tiene permisos adecuados.\"\"\"\n    db_path = os.path.join(app.instance_path, 'app.db')\n    try:\n        # Asegurarse de que el directorio de la base de datos exista\n        if not os.path.exists(app.instance_path):\n            os.makedirs(app.instance_path, exist_ok=True)\n        # Si el archivo de la base de datos no existe, lo creamos\n        if not os.path.exists(db_path):\n            with open(db_path, 'w'):  # Abrir con 'with' asegura que el archivo se cierre adecuadamente",
        "detail": "app.utils.database",
        "documentation": {}
    },
    {
        "label": "session_scope",
        "kind": 2,
        "importPath": "app.utils.database",
        "description": "app.utils.database",
        "peekOfCode": "def session_scope():\n    \"\"\"Proporciona un ámbito transaccional seguro\"\"\"\n    session = db.session\n    try:\n        yield session\n        session.commit()\n    except SQLAlchemyError as e:\n        session.rollback()\n        raise e\n    finally:",
        "detail": "app.utils.database",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "kind": 2,
        "importPath": "app.utils.logging",
        "description": "app.utils.logging",
        "peekOfCode": "def configure_logging(app):\n    \"\"\"Configura el sistema de logging de la aplicación.\"\"\"\n    # Configuración de la carpeta de logs\n    log_folder = os.path.join(app.instance_path, app.config['LOG_FOLDER'])\n    # Asegurarse de que el directorio de logs exista y tenga permisos adecuados\n    try:\n        os.makedirs(log_folder, exist_ok=True)\n        # Aseguramos que los permisos sean correctos\n        os.chmod(log_folder, 0o755)\n    except Exception as e:",
        "detail": "app.utils.logging",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Config:\n    # Configuración básica\n    SECRET_KEY = os.getenv('FLASK_SECRET_KEY', secrets.token_urlsafe(64))\n    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', secrets.token_urlsafe(64))\n    # Base de datos\n    #BASE_DIR = Path(__file__).parent.parent\n    #INSTANCE_PATH = os.path.join(BASE_DIR, 'instance')\n    #DB_PATH = BASE_DIR / 'database.db'  # En el directorio del proyecto\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL') \n    ##Pendiente de checar   ",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "configure_db_engine",
        "kind": 2,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "def configure_db_engine(app):\n    \"\"\"Configura el motor de la base de datos con manejo de reconexión\"\"\"\n    engine = db.engine\n    # Configuración para manejar reconexiones\n    @event.listens_for(engine, \"engine_connect\")\n    def ping_connection(connection, branch):\n        if branch:\n            return\n        try:\n            # Ejecuta un ping simple para verificar la conexión",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "db = SQLAlchemy()\nlogin_manager = LoginManager()\njwt = JWTManager()\ncsrf = CSRFProtect()\nlimiter = Limiter(key_func=get_remote_address)\ntalisman = Talisman()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager = LoginManager()\njwt = JWTManager()\ncsrf = CSRFProtect()\nlimiter = Limiter(key_func=get_remote_address)\ntalisman = Talisman()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "jwt = JWTManager()\ncsrf = CSRFProtect()\nlimiter = Limiter(key_func=get_remote_address)\ntalisman = Talisman()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",\n    headers_enabled=True",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "csrf",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "csrf = CSRFProtect()\nlimiter = Limiter(key_func=get_remote_address)\ntalisman = Talisman()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",\n    headers_enabled=True\n)",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\ntalisman = Talisman()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",\n    headers_enabled=True\n)\ndef configure_db_engine(app):",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "talisman",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "talisman = Talisman()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",\n    headers_enabled=True\n)\ndef configure_db_engine(app):\n    \"\"\"Configura el motor de la base de datos con manejo de reconexión\"\"\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "limiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",\n    headers_enabled=True\n)\ndef configure_db_engine(app):\n    \"\"\"Configura el motor de la base de datos con manejo de reconexión\"\"\"\n    engine = db.engine",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    # Configura el host y puerto para que la aplicación sea accesible desde cualquier lugar\n    # y habilita el modo debug solo en desarrollo.\n    app.run(debug=True)",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "wsgi",
        "description": "wsgi",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    # Configura el host y puerto para que la aplicación sea accesible desde cualquier lugar\n    # y habilita el modo debug solo en desarrollo.\n    app.run(debug=True, host=\"0.0.0.0\", port=5000)",
        "detail": "wsgi",
        "documentation": {}
    }
]