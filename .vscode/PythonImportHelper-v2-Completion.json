[
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "conectar_bd",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "register_api",
        "kind": 2,
        "importPath": "api.api",
        "description": "api.api",
        "peekOfCode": "def register_api():\n    data = request.get_json()\n    username = data.get('username')\n    email = data.get('email')\n    password = data.get('password')\n    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        try:\n            cursor.execute('INSERT INTO usuarios (username, password, email) VALUES (?, ?, ?)', ",
        "detail": "api.api",
        "documentation": {}
    },
    {
        "label": "login_api",
        "kind": 2,
        "importPath": "api.api",
        "description": "api.api",
        "peekOfCode": "def login_api():\n    data = request.get_json()\n    username = data.get('username')\n    password = data.get('password')\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('SELECT * FROM usuarios WHERE username = ?', (username,))\n        user = cursor.fetchone()\n        if user and bcrypt.checkpw(password.encode('utf-8'), user[2]):\n            return jsonify({\"message\": \"Login exitoso\"}), 200",
        "detail": "api.api",
        "documentation": {}
    },
    {
        "label": "forgot_password_api",
        "kind": 2,
        "importPath": "api.api",
        "description": "api.api",
        "peekOfCode": "def forgot_password_api():\n    data = request.get_json()\n    email = data.get('email')\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('SELECT password FROM usuarios WHERE email = ?', (email,))\n        user = cursor.fetchone()\n        if user:\n            return jsonify({\"message\": f'Tu contraseña es: {user[0]}'}), 200\n        return jsonify({\"message\": \"No se encontró ninguna cuenta con ese email\"}), 404",
        "detail": "api.api",
        "documentation": {}
    },
    {
        "label": "profile_api",
        "kind": 2,
        "importPath": "api.api",
        "description": "api.api",
        "peekOfCode": "def profile_api():\n    if 'username' in session:\n        with conectar_bd() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT * FROM usuarios WHERE username = ?', (session['username'],))\n            user = cursor.fetchone()\n        return jsonify({\"username\": user[1], \"email\": user[3]}), 200\n    return jsonify({\"message\": \"No autenticado\"}), 401\n# API de logout\ndef logout_api():",
        "detail": "api.api",
        "documentation": {}
    },
    {
        "label": "logout_api",
        "kind": 2,
        "importPath": "api.api",
        "description": "api.api",
        "peekOfCode": "def logout_api():\n    session.pop('user_id', None)\n    session.pop('username', None)\n    return jsonify({\"message\": \"Logout exitoso\"}), 200",
        "detail": "api.api",
        "documentation": {}
    },
    {
        "label": "crear_base_de_datos",
        "kind": 2,
        "importPath": "database.crear_bd",
        "description": "database.crear_bd",
        "peekOfCode": "def crear_base_de_datos():\n    conn = sqlite3.connect('usuarios.db')  # Conectar o crear la BD\n    cursor = conn.cursor()\n    # Crear la tabla de usuarios si no existe\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS usuarios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT UNIQUE NOT NULL,\n            password TEXT NOT NULL,\n            email TEXT UNIQUE NOT NULL",
        "detail": "database.crear_bd",
        "documentation": {}
    },
    {
        "label": "conectar_bd",
        "kind": 2,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "def conectar_bd():\n    return sqlite3.connect('usuarios.db')\n# Crear la tabla de usuarios si no existe\ndef inicializar_bd():\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS usuarios (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "inicializar_bd",
        "kind": 2,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "def inicializar_bd():\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS usuarios (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password TEXT NOT NULL,\n                email TEXT UNIQUE NOT NULL\n            )",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "conectar_bd",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def conectar_bd():\n    return sqlite3.connect('usuarios.db')\n# Crear la tabla de usuarios si no existe\ndef inicializar_bd():\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS usuarios (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "inicializar_bd",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def inicializar_bd():\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS usuarios (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password TEXT NOT NULL,\n                email TEXT UNIQUE NOT NULL\n            )",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def hash_password(password):\n    salt = bcrypt.gensalt()\n    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)\n    return hashed_password.decode('utf-8')  # Guardar como string en SQLite\n# Función para verificar la contraseña\ndef check_password(stored_hash, password):\n    return bcrypt.checkpw(password.encode('utf-8'), stored_hash.encode('utf-8'))  # Convertir a bytes\n# 🚀 API para registrar usuario\n@app.route('/api/register', methods=['POST'])\ndef register_api():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_password(stored_hash, password):\n    return bcrypt.checkpw(password.encode('utf-8'), stored_hash.encode('utf-8'))  # Convertir a bytes\n# 🚀 API para registrar usuario\n@app.route('/api/register', methods=['POST'])\ndef register_api():\n    data = request.get_json()\n    username = data.get('username')\n    email = data.get('email')\n    password = data.get('password')\n    hashed_password = hash_password(password)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "register_api",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def register_api():\n    data = request.get_json()\n    username = data.get('username')\n    email = data.get('email')\n    password = data.get('password')\n    hashed_password = hash_password(password)\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        try:\n            cursor.execute('INSERT INTO usuarios (username, password, email) VALUES (?, ?, ?)', ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    if 'username' in session:\n        return render_template('index.html', username=session['username'])\n    return redirect(url_for('login'))\n# Ruta de registro\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        email = request.form['email']\n        hashed_password = hash_password(password)\n        with conectar_bd() as conn:\n            cursor = conn.cursor()\n            try:\n                cursor.execute('INSERT INTO usuarios (username, password, email) VALUES (?, ?, ?)', ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        with conectar_bd() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT id, username, password FROM usuarios WHERE username = ?', (username,))\n            user = cursor.fetchone()\n            if user and check_password(user[2], password):  # user[2] es la contraseña\n                session['user_id'] = user[0]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "forgot_password",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def forgot_password():\n    if request.method == 'POST':\n        email = request.form['email']\n        with conectar_bd() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT id FROM usuarios WHERE email = ?', (email,))\n            user = cursor.fetchone()\n            if user:\n                flash('Se han enviado instrucciones a tu correo.', 'info')  # Simulación\n            else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def profile():\n    if 'username' in session:\n        with conectar_bd() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT id, username, email FROM usuarios WHERE username = ?', (session['username'],))\n            user = cursor.fetchone()\n        return render_template('profile.html', user=user)\n    return redirect(url_for('login'))\n# Ruta de logout\n@app.route('/logout')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def logout():\n    session.pop('user_id', None)\n    session.pop('username', None)\n    return redirect(url_for('login'))\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = 'tu_clave_secreta'  # Cambia esto por una clave segura\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # Nombre de la vista para el login\n# Función para conectarse a la base de datos\ndef conectar_bd():\n    return sqlite3.connect('usuarios.db')\n# Crear la tabla de usuarios si no existe\ndef inicializar_bd():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = 'tu_clave_secreta'  # Cambia esto por una clave segura\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # Nombre de la vista para el login\n# Función para conectarse a la base de datos\ndef conectar_bd():\n    return sqlite3.connect('usuarios.db')\n# Crear la tabla de usuarios si no existe\ndef inicializar_bd():\n    with conectar_bd() as conn:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # Nombre de la vista para el login\n# Función para conectarse a la base de datos\ndef conectar_bd():\n    return sqlite3.connect('usuarios.db')\n# Crear la tabla de usuarios si no existe\ndef inicializar_bd():\n    with conectar_bd() as conn:\n        cursor = conn.cursor()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager.login_view = 'login'  # Nombre de la vista para el login\n# Función para conectarse a la base de datos\ndef conectar_bd():\n    return sqlite3.connect('usuarios.db')\n# Crear la tabla de usuarios si no existe\ndef inicializar_bd():\n    with conectar_bd() as conn:\n        cursor = conn.cursor()\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS usuarios (",
        "detail": "app",
        "documentation": {}
    }
]